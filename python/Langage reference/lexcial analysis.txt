
1 line structure（线性结构）

1.1 logical line(逻辑行)
  使用新的行

1.2 physical line（物理行）
  使用 \r\n \n \r 作为结束

1.3 comments 解释
  #

1.4 encoding declarations 编码声明
  在文本第一行 coding[=:]\s*([-\w]+)  
  # -*- coding: UTF-8 -*-  如果是第二行 第一行也必须是注释行

1.5 explicit line join （显式连接物理行）使用 \  \后面不能跟注释

1.6 implicit line join （隐式连接物理行） (){}[] 中可以带注释 但不能包含 新行

1.7 String and Bytes literals 字符串和字节字符

  	stringliteral   ::=  [stringprefix](shortstring | longstring)
	stringprefix    ::=  "r" | "u" | "R" | "U" | "f" | "F"
                     | "fr" | "Fr" | "fR" | "FR" | "rf" | "rF" | "Rf" | "RF"
	shortstring     ::=  "'" shortstringitem* "'" | '"' shortstringitem* '"'
	longstring      ::=  "'''" longstringitem* "'''" | '"""' longstringitem* '"""'
	shortstringitem ::=  shortstringchar | stringescapeseq
	longstringitem  ::=  longstringchar | stringescapeseq
	shortstringchar ::=  <any source character except "\" or newline or the quote>
	longstringchar  ::=  <any source character except "\">
	stringescapeseq ::=  "\" <any source character>


	bytesliteral   ::=  bytesprefix(shortbytes | longbytes)
	bytesprefix    ::=  "b" | "B" | "br" | "Br" | "bR" | "BR" | "rb" | "rB" | "Rb" | "RB"
	shortbytes     ::=  "'" shortbytesitem* "'" | '"' shortbytesitem* '"'
	longbytes      ::=  "'''" longbytesitem* "'''" | '"""' longbytesitem* '"""'
	shortbytesitem ::=  shortbyteschar | bytesescapeseq
	longbytesitem  ::=  longbyteschar | bytesescapeseq
	shortbyteschar ::=  <any ASCII character except "\" or newline or the quote>
	longbyteschar  ::=  <any ASCII character except "\">
	bytesescapeseq ::=  "\" <any ASCII character>

	前缀 r / R 表示字符串为 raw strings 把转移\作为普通字符,  "\""  会被解析成两个 \和 ", \换行 -》两个字符，不会被被解析继续符
	前缀 f / F formatted string literal.

	\newline	反斜杠和换行符被忽略	 
	\\	反斜杠（\）	 
	\'	单引号（'）	 
	\"	双引号（"）	 
	\a	ASCII贝尔（BEL）	 
	\b	ASCII退格（BS）	 
	\f	ASCII Formfeed（FF）	 
	\n	ASCII换行（LF）	 
	\r	ASCII回车（CR）	 
	\t	ASCII水平标签（TAB）	 
	\v	ASCII垂直标签（VT）	 
	\ooo	具有八进制值的字符 ooo	（1,3）
	\xhh	十六进制值hh的字符	（2,3）

	仅在字符串文字中识别的转义序列是：
	\N{name}	Unicode数据库中名为name的字符	（4）
	\uxxxx		具有16位十六进制值xxxx的字符	（5）
	\Uxxxxxxxx	具有32位十六进制值xxxxxxxx的字符	（6）

1.8 string literal concatenation）（字符串文字串联）
  使用空格 str = 'hello' 'word' 相当于 str = 'helloword', 在字符串编译连接时 使用 ‘+’运算符

1.9 formatted string literals(格式化字符串)

	f_string          ::=  (literal_char | "{{" | "}}" | replacement_field)*
	replacement_field ::=  "{" f_expression ["!" conversion] [":" format_spec] "}"
	f_expression      ::=  (conditional_expression | "*" or_expr)
                         ("," conditional_expression | "," "*" or_expr)* [","]
                       | yield_expression
	conversion        ::=  "s" | "r" | "a"
	format_spec       ::=  (literal_char | NULL | replacement_field)*
	literal_char      ::=  <any code point except "{", "}" or NULL>

  '!s' calls str() on the result, '!r' calls repr(), and '!a' calls ascii()
  \ 不允许出现在 格式化表达式中

1.10 numerical literals (数字字符)
  three types of numeric literals: integers, floating point numbers, and imaginary numbers

	Note that numeric literals do not include a sign; a phrase like -1 is actually an expression composed of the unary operator ‘-‘ and the literal 1. 

1.11 integer literals（整型常量）

	integer      ::=  decinteger | bininteger | octinteger | hexinteger
	decinteger   ::=  nonzerodigit (["_"] digit)* | "0"+ (["_"] "0")*
	bininteger   ::=  "0" ("b" | "B") (["_"] bindigit)+
	octinteger   ::=  "0" ("o" | "O") (["_"] octdigit)+
	hexinteger   ::=  "0" ("x" | "X") (["_"] hexdigit)+
	nonzerodigit ::=  "1"..."9"
	digit        ::=  "0"..."9"
	bindigit     ::=  "0" | "1"
	octdigit     ::=  "0"..."7"
	hexdigit     ::=  digit | "a"..."f" | "A"..."F"

1.12 floating point literal（浮点常量）

	floatnumber   ::=  pointfloat | exponentfloat
	pointfloat    ::=  [digitpart] fraction | digitpart "."
	exponentfloat ::=  (digitpart | pointfloat) exponent
	digitpart     ::=  digit (["_"] digit)*
	fraction      ::=  "." digitpart
	exponent      ::=  ("e" | "E") ["+" | "-"] digitpart

1.13 imaginary literals (产生复数)

	imagnumber ::=  (floatnumber | digitpart) ("j" | "J")

1.14 Operators

+       -       *       **      /       //      %      @
<<      >>      &       |       ^       ~
<       >       <=      >=      ==      !=

1.15 Delimiters

(       )       [       ]       {       }
,       :       .       ;       @       =       ->
+=      -=      *=      /=      //=     %=      @=
&=      |=      ^=      >>=     <<=     **=



